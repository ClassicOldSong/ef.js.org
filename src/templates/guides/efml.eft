>section.{{class.content}}
	>h2
		.Syntax
	>p
		>ul
			>li
				>code
					.>
				. stands for tag names. For example, &
				>code
					.>div
				. will be rendered as &
				>code
					.<div></div>
				..
			>li
				>code
					..
				. after &
				>code
					.>
				. stands for class names for this tag. For example, &
				>code
					.>div.some.class.names
				. will be rendered as &
				>code
					.<div class="some class names"></div>
				..
			>li
				>code
					.#
				. at the end of tag definition stands for the reference name of the element. For example, you can get the original referenced element inside your code like this &
				>code
					.state.$refs.referenced
				. with the following template &
				>code
					.>div.some.class.names#referenced
				..
			>li
				>code
					.#
				. stands for the attribute of the tag. For example, &
				>code
					.#style = background-color: #CCC;
				. after a &
				>code
					.>div
				. tag will be rendered as &
				>code
					.<div style="background-color: #CCC;"></div>
				..
			>li
				>code
					.%
				. stands for the property of the tag. For example, when you have &
				>code
					.%someProperty = something
				. after a &
				>code
					.>div#testdiv
				. tag, you will find that the value of &
				>code
					.state.$refs.testdiv.someProperty
				. has already been set to &
				>code
					.something
				..
			>li
				>code
					.@
				. stands for the event of the element. For example, write &
				>code
					.@click = clickHandler
				.after a &
				>code
					.>div
				. tag will create a click handler called &
				>code
					.clickHandler
				. at &
				>code
					.state.$methods
				.. What you only need to do is put a handler function to the right place, ef does all the other thing for you.
			>li
				>code
					..
				. stands fot the text content of the element. For example, write &
				>code
					..some text
				. after a &
				>code
					.>div
				. tag will be rendered as &
				>code
					.<div>some text</div>
				..
			>br
			>b
				.Note:
			. Escape character of EFML is &
			>code
				.&&
			., in case of the conflict with js's escape sequence.
	>h2
		.Parser
	>p
		.Currently there is only one official parser for EFML: &
		>a
			#href = https://github.com/ClassicOldSong/eft-parser
			#rel = noopener
			#target = _blank
			.eft-parser
	>p
		.The parser converts the EFML template to AST that ef uses. See &
		>a
			#href = guides/deep-into-ef
			.Deep Into ef
		. section for more information about the AST format.
	>h2
		.Highlighters
	>p
		.A bunch of code highlighters for EFML have already been released. See blow:
	>p
		>ul
			>li
				>a
					#href = https://github.com/ClassicOldSong/SublimeEFMLHighlighter
					#rel = noopener
					#target = _blank
					.SublimeEFMLHighlighter
				. - EFML syntax highlighter for SublimeText3
			>li
				>a
					#href = https://marketplace.visualstudio.com/items?itemName=ClassicOldSong.efml
					#rel = noopener
					#target = _blank
					.VSCodeEFMLHighlighter
				. - EFML syntax highlighter for VSCode
			>li
				>a
					#href = https://atom.io/packages/efml
					#rel = noopener
					#target = _blank
					.AtomEFMLHighlighter
				. - EFML syntax highlighter for Atom
			>li
				>a
					#href = https://github.com/ClassicOldSong/PrismEFMLSyntax
					#rel = noopener
					#target = _blank
					.PrismEFMLSyntax
				. - EFML syntax for Prism
			>li
				>a
					#href = https://github.com/deluxghost/EFML.vim
					#rel = noopener
					#target = _blank
					.EFML.vim
				. by deluxghost - EFML (*.ef, *.eft) syntax highlighting for Vim
